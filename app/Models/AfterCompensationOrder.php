<?php

namespace App\Models;

use Illuminate\Support\Facades\DB;
use Dingo\Api\Exception\UpdateResourceFailedException;
use Illuminate\Support\Facades\Auth;

class AfterCompensationOrder extends Model
{
    protected $table = 'cmptn_orders';

    const CMPTN_STATUS_NEW = 10;//创建后初始为新订单,待审核
    const CMPTN_STATUS_AUDIT = 20;//审核通过
    const CMPTN_STATUS_CANCEL = 50;//作废

    //驳回状态
    const CMPTN_RETURN_AUDIT = 21;//审核驳回

    //订单来源
    const CMPTN_SOURCE_SYSTEM = 'system';
    const CMPTN_SOURCE_TAOBAO = 'taobao';

    //赔偿方向
    const CMPTN_DIRECTION_WEPAY = '我们赔偿';
    const CMPTN_DIRECTION_PAYUS = '赔偿我们';

    //结账方式
    const CMPTN_PAYMENT_METHOD_NOW = '现付';
    const CMPTN_PAYMENT_METHOD_BYMONTH = '月结';

    //订单状态
    public static $orderStatusMap = [
        self::CMPTN_STATUS_NEW => '未审核',
        self::CMPTN_STATUS_AUDIT => '已审核',
        self::CMPTN_STATUS_CANCEL => '已取消'
    ];

    //订单操作
    public static $orderOperationMap = [
        self::CMPTN_STATUS_NEW => '未审核',
        self::CMPTN_STATUS_AUDIT => '已审核',
        self::CMPTN_STATUS_CANCEL => '已取消',

        self::CMPTN_RETURN_AUDIT => '审核退回',
    ];

    //订单操作详情
    public static $orderOperationDescriptionMap = [
        self::CMPTN_STATUS_NEW => '创建订单',
        self::CMPTN_STATUS_AUDIT => '赔偿审核',
        self::CMPTN_STATUS_CANCEL => '订单作废',
        self::CMPTN_RETURN_AUDIT => '赔偿审核退回',
    ];

    //建单类型
    public static $orderSourceMap = [
        self::CMPTN_SOURCE_SYSTEM => '系统建单',
        self::CMPTN_SOURCE_TAOBAO => '淘宝商城',
    ];

    //计费方式
    public static $paymentMethodMap = [
        self::CMPTN_PAYMENT_METHOD_NOW => '现付',
        self::CMPTN_PAYMENT_METHOD_BYMONTH => '月结',
    ];

    protected $fillable = [
        'cmptn_status',
        'order_source',
        'cmptn_direction',
        'cmptn_shop',
        'responsible_party',
        'responsible_person',
        'customer_nickname',
        'customer_name',
        'customer_phone',
        'customer_city',
        'customer_address',
        'cmptn_fee',
        'logistics_company',
        'logistics_tracking_number',
        'payment_method',
        'order_stuff',
        'order_number',
        'problem_goods',
        'problem_description',
        'note',
        'refuse_reason',
        'is_invalid',
        'fee_type',
        'payee',
        'payee_account'
    ];

    protected $dates = [
        'negotiation_date',
        'created_at',
        'submited_at',
        'audited_at'
    ];

    //设置类型
    protected $casts = [
        'cmptn_shop'=>'integer',
        'order_number'=>'integer',
        'order_stuff'=>'integer',
        'is_valid' =>'boolean'
    ];

    //观察者
    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        // 监听模型创建事件，在写入数据库之前触发
        static::creating(function($model) {
            // 如果模型的 no 字段为空
            if (!$model->system_order_number) {
                // 调用 findAvailableNo 生成订单流水号
                $model->system_order_number = static::findAvailableNo('DD', 'system_order_number');
                // 如果生成失败，则终止创建订单
                if (!$model->system_order_number) {
                    return false;
                }
            }

            // 如果模型的 order_source 字段为空
            if (!$model->order_source) {

                $model->order_source = self::ORDER_SOURCE_SYSTEM;
                // 如果生成失败，则终止创建订单
                if (!$model->order_source) {
                    return false;
                }
            }

            // 如果模型的 order_source 字段为空
            if (!$model->order_status) {

                $model->order_status = self::CMPTN_STATUS_NEW;
                // 如果生成失败，则终止创建订单
                if (!$model->order_status) {
                    return false;
                }
            }

//            // 如果模型的 business_personnel_name 字段为空
//            if (!$model->business_personnel_id) {
//                $model->business_personnel_id = Auth::guard('api')->id();
//                // 如果生成失败，则终止创建订单
//                if (!$model->business_personnel_id) {
//                    return false;
//                }
//            }

        });
    }

    public function getOrderStatusAttribute($value)
    {
        return self::$orderStatusMap[$value] ?? $value;
    }

    /**
     * 生成订单流水号
     *
     * @param $prefix       订单流水号前缀
     * @param $index        字段名
     * @return string
     */
    public static function findAvailableNo(String $prefix, String $index) :String
    {
        do {
            // 随机生成订单号
            $no = $prefix . date('YmdHis') . str_pad(mt_rand(1, 99999), 5, 0, STR_PAD_LEFT);
        } while (static::query()->where($index, $no)->exists());
        
        return $no;
    }

    /**
     * 订单未锁定
     * @return bool
     */
    public function unlock()
    {
        return $this->getOriginal('order_status') != self::ORDER_STATUS_LOCK;
    }

    /**
     * 订单锁定或释放
     * @return bool
     */
    public function lockOrUnlock()
    {
        if($this->unlock()){
            $this->business_personnel_id = Auth::guard('api')->id();
            $this->locker_id = Auth::guard('api')->id();
            $this->order_status = self::ORDER_STATUS_LOCK;
        }else{
            $this->business_personnel_id = 0;
            $this->locker_id = 0;
            $this->order_status = self::CMPTN_STATUS_NEW;
        }

        $this->save();
    }

    /**
     * 客审
     * @return bool
     */
    public function audit()
    {
        $this->locker_id = 0;
        $this->order_status = self::ORDER_STATUS_CS_AUDIT;
        $this->save();
    }

    /**
     * 退审
     * @return bool
     */
    public function unAudit()
    {
        $this->business_personnel_id = 0;
        $this->locker_id = 0;
        $this->order_status = self::CMPTN_STATUS_NEW;
        $this->save();
    }

    /**
     * 跟单一审
     * @return bool
     */
    public function oneAudit()
    {
        $this->order_status = self::ORDER_STATUS_ONE_AUDIT;
        $this->save();
    }

    /**
     * 退回跟单一审
     * @return bool
     */
    public function unOneAudit()
    {
        $this->order_status = self::ORDER_STATUS_CS_AUDIT;
        $this->save();
    }

    /**
     * 财审
     * @return bool
     */
    public function financialAudit()
    {
        $this->order_status = self::ORDER_STATUS_FD_AUDIT;
        $this->save();
    }

    /**
     * 退回财审
     * @return bool
     */
    public function unFinancialAudit()
    {
        $this->order_status = self::ORDER_STATUS_ONE_AUDIT;
        $this->save();
    }

    /**
     * 跟单货审
     * @return bool
     */
    public function cargoAudit()
    {
        $this->order_status = self::ORDER_STATUS_CARGO_AUDIT;
        $this->save();
    }

    /**
     * 仓储退回客审
     * @return bool
     */
    public function stockOutToCS()
    {
        $this->order_status = self::CMPTN_STATUS_NEW;
        $this->save();
    }


    /**
     * 仓储发货退审
     * @return bool
     */
    public function stockOutUnAudit()
    {
        $this->order_status = self::ORDER_STATUS_CARGO_AUDIT;
        $this->save();
    }


    /**
     * 是否缺货
     * @return bool
     */
    public function isOOS()
    {
        $warehouseId = $this->warehouses_id;

        //遍历子单商品
        $this->orderItems->map(function($item) use ($warehouseId){
            $num = $item->combination->productComponents->map(function($item) use ($warehouseId){
                return optional($item->stocks->where('warehouse_id',$warehouseId)->first())->quantity ?? 0;
            })->min();

            if($num < $item->quantity)
                throw new UpdateResourceFailedException('缺货、请及时补充');
        });

        return false;
    }


    /**
     * 仓储发货
     * @return bool
     */
    public function stockOut()
    {
        $this->order_status = self::ORDER_STATUS_STOCK_OUT;

        //获取出库数据
        $order = $this->load('orderItems.combination.productComponents');
        //发货---减少库存---新增出库单
        DB::transaction(function () use ($order) {
            $warehouseId = $order->warehouses_id;
            $orderNo = $order->system_order_number;
            $order->orderItems->map(function($item) use ($warehouseId, $orderNo) {
                $amount = $item->quantity;
                $item->combination->productComponents->map(function($item) use ($warehouseId, $amount, $orderNo) {
                    $item->stockOutByWarehouseId($warehouseId,$amount);
                    StockOut::create([
                        'warehouse_id'=>$warehouseId,
                        'product_components_id'=>$item->id,
                        'stock_out_quantity'=>$amount,
                        'remark'=>'订单号:'.$orderNo
                    ]);
                });
            });
        });

        $this->save();
    }

    /**
     * 拆单
     * @param $data       数据
     * @return bool
     */
    public function splitOrder($data)
    {
        //获取出库数据
        $order = $this->load('orderItems');

        $orderItemOne = $order->orderItems->map(function($item) use ($data){
            $orderItem = collect($data)->where('id',$item->id);
            if($orderItem->count()){
                $orderItem = $orderItem->first();
                if ($orderItem['quantity'] > 0 && $item->quantity - $orderItem['quantity'] > 0){
                    $item->quantity = $item->quantity - $orderItem['quantity'];
                }elseif ($orderItem['quantity'] > 0 && $item->quantity - $orderItem['quantity'] == 0){
                    $item = null;
                }else{
                    throw new UpdateResourceFailedException('拆分出错');
                }
            }
            return $item;
        })->toArray();

        $orderItemTwo = $order->orderItems->map(function($item) use ($data){
            $orderItem = collect($data)->where('id',$item->id);
            if($orderItem->count()){
                $item->quantity = $orderItem->first()['quantity'];
            }else{
                $item = null;
            }
            return $item;
        })->toArray();

        DB::transaction(function () use ($orderItemOne, $orderItemTwo){
            //新建订单
            $newOrderOne = $this->newQuery()->create($this->toArray());
            $newOrderTwo = $this->newQuery()->create($this->toArray());

            //新增子单
            collect($orderItemOne)->map(function($item) use ($newOrderOne){
                if (is_null($item)) return ;
                $newOrderOne->orderItems()->create($item);
            });

            collect($orderItemTwo)->map(function($item) use ($newOrderTwo){
                if (is_null($item)) return ;
                $newOrderTwo->orderItems()->create($item);
            });

            //删除旧单
            $this->paymentDetails()->delete();
            $this->orderItems()->delete();
            $this->delete();

            //记录拆分操作

        });

        return true;
    }

    /**
     * 合并订单
     * @param $data       数据
     * @return bool
     */
    public function mergerOrder($data)
    {
        $orderOneId = $data['order_id_one'];
        $orderTwoId = $data['order_id_two'];

        $orderOne = $this->newQuery()->findOrFail($orderOneId);
        $orderTwo = $this->newQuery()->findOrFail($orderTwoId);

        //判断主订单数据是否匹配
        if(collect($orderOne->toArray())->except(['id', 'system_order_number', 'created_at', 'updated_at'])->diffAssoc($orderTwo->toArray())->count()){
            throw new UpdateResourceFailedException('主订单数据匹配，无法合并');
        }

        //提取数据
        $order = $orderOne->toArray();
        $orderItem = $orderOne->orderItems->merge($orderTwo->orderItems)->toArray();

        DB::transaction(function () use ($order, $orderItem, $orderOneId, $orderTwoId){
            //新建订单
            $newOrder = $this->newQuery()->create($order);

            //新增子单
            collect($orderItem)->map(function($item) use ($newOrder){
                $newOrder->orderItems()->create($item);
            });

            //删除旧单
            PaymentDetail::query()->whereIn('orders_id', [$orderOneId, $orderTwoId])->delete();
            OrderItem::query()->whereIn('orders_id', [$orderOneId, $orderTwoId])->delete();
            Order::destroy($orderOneId, $orderTwoId);

            //记录拆分操作

        });
    }

    public function cmptnStatus()
    {
        return $this->belongsTo(CmptnStatus::class,'cmptn_status');
    }

    public function orderSource()
    {
        return $this->belongsTo(orderSource::class,'order_source');
    }

    public function cmptnDirection()
    {
        return $this->belongsTo(CmptnDirection::class,'cmptn_direction');
    }

    public function cmptnShop()
    {
        return $this->belongsTo(CmptnShop::class,'cmptn_shop');
    }

    public function responsibleParty()
    {
        return $this->belongsTo(ResponsibleParty::class,'responsible_party');
    }

    public function responsiblePerson()
    {
        return $this->belongsTo(ResponsiblePerson::class, 'responsible_person');
    }

    public function customerNickname()
    {
        return $this->belongsTo(CustomerNickname::class, 'customer_nickname');
    }

    public function customerName()
    {
        return $this->belongsTo(CustomerName::class, 'customer_name');
    }

    public function customerPhone()
    {
        return $this->belongsTo(CustomerPhone::class,'customer_phone');
    }

    public function customerCity()
    {
        return $this->belongsTo(CustomerCity::class, 'customer_city');
    }

    public function customerAddress()
    {
        return $this->belongsTo(CustomerAddress::class, 'customer_address');
    }

    public function cmptnFee()
    {
        return $this->belongsTo(CmptnFee::class, 'cmptn_fee');
    }

    public function logisticsCompany()
    {
        return $this->belongsTo(LogisticsCompany::class, 'logistics_company');
    }

    public function logisticsTrackingNumber()
    {
        return $this->belongsTo(LogisticsTrackingNumber::class, 'logisticsTrackingNumber');
    }

    public function paymentMethod()
    {
        return $this->belongsTo(PaymentMethod::class, 'payment_method');
    }

    public function orderStuff()
    {
        return $this->belongsTo(OrderStuff::class, 'order_stuff');
    }

    public function orderNumber()
    {
        return $this->belongsTo(OrderNumber::class, 'order_number');
    }

    public function problemGoods()
    {
        return $this->belongsTo(ProblemGoods::class, 'problem_goods');
    }

    public function problemDescription()
    {
        return $this->belongsTo(ProblemDescription::class, 'problem_description');
    }

    public function note()
    {
        return $this->belongsTo(Note::class, 'note');
    }

    public function refuseReason()
    {
        return $this->belongsTo(RefuseReason::class, 'refuse_reason');
    }

    public function isInvalid()
    {
        return $this->belongsTo(IsInvalid::class, 'is_invalid');
    }

    public function feeType()
    {
        return $this->belongsTo(FeeType::class, 'fee_type');
    }

    public function payee()
    {
        return $this->belongsTo(Payee::class, 'payee');
    }

    public function payeeAccount()
    {
        return $this->belongsTo(PayeeAccount::class, 'payee_account');
    }
}
