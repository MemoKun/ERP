<?php

namespace App\Models;

use Carbon\Carbon;
use Illuminate\Support\Facades\Auth;

class PurchaseReturn extends Model
{
    // 采购退货状态
    const PURCHASE_RETURN_STATUS_NEW = 10;
    const PURCHASE_RETURN_STATUS_SUBMIT = 20;
    const PURCHASE_RETURN_STATUS_AUDIT = 30;

    // 采购退货状态
    public static $orderStatusMap = [
        self::PURCHASE_RETURN_STATUS_NEW => '新建',
        self::PURCHASE_RETURN_STATUS_SUBMIT => '未审核',
        self::PURCHASE_RETURN_STATUS_AUDIT => '已审核',
    ];

    // 采购退货操作
    public static $afterSaleOperationMap = [
        self::PURCHASE_RETURN_STATUS_NEW => '创建',
        self::PURCHASE_RETURN_STATUS_SUBMIT => '提交',
        self::PURCHASE_RETURN_STATUS_AUDIT => '审核',
    ];

    // 采购退货操作详情
    public static $afterSaleOperationDescriptionMap = [
        self::PURCHASE_RETURN_STATUS_NEW => '创建采购退货单',
        self::PURCHASE_RETURN_STATUS_SUBMIT => '提交采购退货单',
        self::PURCHASE_RETURN_STATUS_AUDIT => '审核采购退货单',
    ];

    protected $table = 'purchase_returns';

    protected $fillable = [
        'remark','status','purchase_return_status'
    ];

    //设置类型
    protected $casts = [
        'status' => 'boolean',
        'is_submit' => 'boolean',
        'is_audit' => 'boolean',
        'is_print' => 'boolean',
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        // 监听模型创建事件，在写入数据库之前触发
        static::creating(function($model) {
            // 如果模型的 no 字段为空
            if (!$model->purchase_return_no) {
                // 调用 findAvailableNo 生成订单流水号
                $model->purchase_return_no = static::findAvailableNo();
                // 如果生成失败，则终止创建订单
                if (!$model->purchase_return_no) {
                    return false;
                }
            }
            // 如果模型的 creator_id 字段为空
            if (!$model->creator_id) {

                $model->creator_id = Auth::guard('api')->id();;
                // 如果生成失败，则终止创建订单
                if (!$model->creator_id) {
                    return false;
                }
            }
        });
    }

    public static function findAvailableNo()
    {
        // 订单流水号前缀
        $prefix = 'RG';

        for ($i = 0; $i < 10; $i++) {
            // 随机生成 6 位的数字
            $no = $prefix . date('YmdHis') . str_pad(mt_rand(1, 99999), 5, 0, STR_PAD_LEFT);
            // 判断是否已经存在
            if (!static::query()->where('purchase_return_no', $no)->exists()) {
                return $no;
            }
        }

        return false;
    }

    /**
     * 提交
     */
    public function input()
    {
        $this->purchase_return_status = self::PURCHASE_RETURN_STATUS_SUBMIT;
        $this->is_submit = 1;
        $this->submitter_id = Auth::guard('api')->id();
        $this->submit_at = Carbon::now();
        $this->save();
    }

    /**
     * 驳回
     */
    public function reject()
    {
        $this->purchase_return_status = self::PURCHASE_RETURN_STATUS_NEW;
        $this->is_submit = 0;
        $this->submitter_id = 0;
        $this->submit_at = null;
        $this->save();
    }

    /**
     * 审核
     */
    public function audit()
    {
        $this->purchase_return_status = self::PURCHASE_RETURN_STATUS_AUDIT;
        $this->audit_at = Carbon::now();
        $this->auditor_id = Auth::guard('api')->id();
        $this->is_audit = 1;
        $this->save();
    }
    
   /**
    * 退审
    */
   public function unAudit()
   {
        $this->purchase_return_status = self::PURCHASE_RETURN_STATUS_SUBMIT;
        $this->audit_at = null;
        $this->auditor_id = 0;
        $this->is_audit = 0;
        $this->save();
   }

    /**
     * 打印
     */
    public function print()
    {
        $this->is_print = 1;
        $this->save();
    }

    public function purchaseReturnDetails()
    {
        return $this->hasMany(PurchaseReturnDetail::class,'purchase_returns_id');
    }

    public function creator()
    {
        return $this->belongsTo(User::class, 'creator_id');
    }

    public function submitter()
    {
        return $this->belongsTo(User::class, 'submitter_id');
    }

    public function auditor()
    {
        return $this->belongsTo(User::class, 'auditor_id');
    }
}
